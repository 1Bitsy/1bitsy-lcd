#!/usr/bin/env python3

import argparse
from collections import namedtuple
from contextlib import contextmanager
from itertools import groupby
import sys

from PIL import Image


def read_image(file_name):
    def to_rgb565(pixel):
        return pixel[0] >> 3 << 11 | pixel[1] >> 2 << 5 | pixel[2] >> 3 << 0

    img = Image.open(file_name)
    pix = img.load()
    pixels = [to_rgb565(pix[x, y])
              for y in range(img.height)
              for x in range(img.width)]
    image_type = namedtuple('image', 'w h pixels')
    return image_type(w=img.width, h=img.height, pixels=pixels)


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


file_template = '''
#ifndef {guard}
#define {guard}

/* This file was automatically generated by {program}.  Do not edit. */

#include "gfx-button.h"

static const gfx_rgb565 {ident}_up_pixels[] = {{
{up_pixel_data}
}};

static const gfx_rgb565 {ident}_down_pixels[] = {{
{down_pixel_data}
}};

static const gfx_pixtile {ident}_up_pixtile = {{
    .pixels = (gfx_rgb565 *){ident}_up_pixels,
    .x      = 0,
    .y      = 0,
    .w      = {uw},
    .h      = {uh},
    .stride = {uw},
}};

static const gfx_pixtile {ident}_down_pixtile = {{
    .pixels = (gfx_rgb565 *){ident}_down_pixels,
    .x      = 0,
    .y      = 0,
    .w      = {dw},
    .h      = {dh},
    .stride = {dw},
}};

static void gfx_init_{ident}_button(gfx_button *button,
                                    bool is_down,
                                    gfx_ipoint position)
{{
    button->is_down    =  is_down;
    button->position   =  position;
    button->up_image   = &{ident}_up_pixtile;
    button->down_image = &{ident}_down_pixtile;
}}

#endif /* !{guard} */
'''.lstrip()


def by_n(n, seq):
    return ((x for (i, x) in g)
            for (k, g) in groupby(enumerate(seq), lambda x: x[0] // n))

def format_pixels(pixels):
    return '\n'.join('    {},'.format(', '.join('{:#6x}'.format(w)
                                             for w in line))
                     for line in by_n(8, pixels))

def emit_button_file(button_name, up_image, dn_image, out=sys.stdout):
    up_pixel_data = format_pixels(up_image.pixels)
    dn_pixel_data = format_pixels(dn_image.pixels)

    params = {
        'program': sys.argv[0],
        'ident': button_name,
        'guard': button_name.upper() + '_included',
        'up_pixel_data': up_pixel_data,
        'down_pixel_data': dn_pixel_data,
        'uw': up_image.w,
        'uh': up_image.h,
        'dw': dn_image.w,
        'dh': dn_image.h,
    }
    print(file_template.format(**params), file=out)


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

@contextmanager
def open_or(file, mode, alt_fd):
    if file:
        f = open(file, mode)
        yield f
        f.close()
    else:
        yield alt_fd

def main(argv):
    desc = 'Convert button images into a C header.'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-o', '--output')
    parser.add_argument('button_name')
    parser.add_argument('button_up_image', action='store')
    parser.add_argument('button_down_image', action='store')
    args = parser.parse_args(argv[1:])

    up_image = read_image(args.button_up_image)
    dn_image = read_image(args.button_down_image)

    with open_or(args.output, 'w', sys.stdout) as out:
        emit_button_file(args.button_name, up_image, dn_image, out=out)


if __name__ == '__main__':
    main(sys.argv)
